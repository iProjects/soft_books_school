<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="errorProvider1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        //D////w
</value>
  </data>
</root>